name: Main

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  # Cancel CI runs on a branch (other than main) on updates.defaults:
  # This limits redundant runs, but also ensures we get signal on every
  # merge to main.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'main')}}

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      # TODO: Caching

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env
        id: setup

      - name: Run `fmt-check`
        run: uv run poe fmt-check
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

      - name: Run `lint-check`
        run: uv run poe lint-check
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

      - name: Run `lock-check`
        run: uv run poe lock-check
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

      - name: Run `dep-check`
        run: uv run poe dep-check
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

  tests-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python-version }}

      - name: Test All Stores (3.12 only)
        if: ${{ success() && matrix.python-version == '3.12' }}
        id: test
        run:
            uv run poe test-all
                --junitxml=junit/test-results-${{ matrix.python-version }}.xml
        env:
          ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
          ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}
          ASTRA_DB_KEYSPACE: ci_${{ github.run_id }}_${{ strategy.job-index }}_${{ github.run_attempt }}

      - name: Drop Astra Keyspace
        # Even though it seems redundant, the `always() &&` is necessary to signal to
        # GitHub actions that we want this to run even if the job is cancelled.
        if: ${{ always() && steps.test.conclusion != 'skipped' }}
        run:
            uv run scripts/drop-astra-keyspace.py
        env:
          ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
          ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}
          ASTRA_DB_KEYSPACE: ci_${{ github.run_id }}_${{ strategy.job-index }}_${{ github.run_attempt }}

      - name: Test In-Memory Stores (non-3.12)
        if: ${{ success() && matrix.python-version != '3.12' }}
        run:
            uv run poe test
                --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Run `type-check`
        run: uv run poe type-check

      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: packages/*/junit/test-results-${{ matrix.python-version }}.xml

  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Sync Docs Dependencies
        run: uv sync --group=docs

      - name: Check if documentation can be built
        run: uv run poe docs-build
        id: build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
          ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}

      - name: Upload docs
        uses: actions/upload-pages-artifact@v3
        with:
          # Automatically uploads an artifact from the './_site' directory by default
          path: ${{ github.workspace }}/docs/_site

  docs-deploy:
    # Deploy docs on push to main.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Deployment job
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

      # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    runs-on: ubuntu-latest
    needs: [build-docs]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
