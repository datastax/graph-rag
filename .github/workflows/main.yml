name: Main

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  # Cancel CI runs on a branch (other than main) on updates.defaults:
  # This limits redundant runs, but also ensures we get signal on every
  # merge to main.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'main')}}

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      # TODO: Caching

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env
        id: setup

      - name: Run `make fmt-check`
        run: make fmt-check
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

      - name: Run `make check`
        run: make check
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

      - name: Run `make check-lock`
        run: make check-lock
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

      - name: Run `make deptry`
        run: make deptry
        # Runs this as long as setup succeeds.
        if: ${{ !cancelled() && steps.setup.conclusion == 'success' }}

  tests-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env
        id: setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Test All Stores (3.12 only)
        if: ${{ success() && matrix.python-version == '3.12' }}
        run:
            cd packages/langchain-graph-retriever && uv run pytest -vs .
                --stores=all
                --junitxml=junit/test-results-${{ matrix.python-version }}.xml
        env:
          ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
          ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}
          ASTRA_DB_KEYSPACE: ci_${{ github.run_id }}_${{ strategy.job-index }}_${{ github.run_attempt }}

      - name: Drop Astra Keyspace
        if: ${{ matrix.python-version == '3.12' }}
        run:
            uv run scripts/drop-astra-keyspace.py
        env:
          ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
          ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}
          ASTRA_DB_KEYSPACE: ci_${{ github.run_id }}_${{ strategy.job-index }}_${{ github.run_attempt }}

      - name: Test In-Memory Stores (non-3.12)
        if: ${{ success() && matrix.python-version != '3.12' }}
        run:
            cd packages/langchain-graph-retriever && uv run pytest -vs .
                --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Run `make mypy`
        run: make mypy

      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml

#   check-docs:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out
#         uses: actions/checkout@v4

#       - name: Set up the environment
#         uses: ./.github/actions/setup-python-env

#       - name: Check if documentation can be built
#         run: uv run mkdocs build -s